#include <iostream>
#include <string.h>
#include "function.h"
using namespace std;

std::ostream &operator<<(std::ostream &out, const Matrix &a) {
    int i, j;
    for(i = 0; i < a.size; i++) {
        for(j = 0; j < a.size - 1; j++) {
            out << a.matrix[i][j] << " ";
        }
        out << a.matrix[i][j] << endl;
    }
    return out;
}

std::istream &operator>>(std::istream &in, Matrix &a) {
    for(int i = 0; i < a.size; i++) {
        for(int j = 0; j < a.size; j++) {
            in >> a.matrix[i][j];
        }
    }
    return in;
}

Matrix::Matrix(int s):size(s)
{
    buf = new int[size*size];
    matrix = new int* [size];

    for(int i=0; i<size; i++)
        matrix[i] = &buf[i*size];

    for(int i=0; i<size; i++)
        for(int j=0; j<size; j++)
            matrix[i][j] = 0;
}

Matrix::Matrix(const Matrix &a) {
    *this = a;
}

Matrix::~Matrix() {
    delete [] matrix;
    delete [] buf;
}

Matrix &Matrix::operator=(const Matrix &a) {
        if(a.size!=size) {
            delete [] matrix;
            delete [] buf;

            size = a.size;
            buf = new int[size*size];
            matrix = new int* [size];

            for(int i=0; i<size; i++)
                matrix[i] = &buf[i*size];
        }

        for(int i=0; i<size; i++)
            for(int j=0; j<size; j++)
                matrix[i][j] = a.matrix[i][j];

        return *this;
    }
Matrix &Matrix::clockwise90() {
    Matrix a;
    a = *this;
    for(int i = 0; i < size; i++) {
        for(int j = 0; j < size; j++) {
            matrix[i][j] = a.matrix[j][size-i-1];
        }
    }
    return *this;
}
