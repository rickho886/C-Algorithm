#include <iostream>
#include "function.h"
using namespace std;

Matrix::Matrix(){
}

Matrix::Matrix(const int N, const int m[50][50])
{
    matrix_size = N;
    for (int i = 0; i<N; i++) {
        for (int j = 0; j<N; j++) {
            matrix[i][j] = m[i][j];
        }
    }
}

Matrix Matrix::add(const Matrix b) const
{
    Matrix ans;
    ans.matrix_size = matrix_size;
    for (int i = 0; i < matrix_size; i++) {
        for (int j = 0; j < matrix_size; j++) {
            ans.matrix[i][j] = matrix[i][j] + b.matrix[i][j];
        }
    }
    return ans;
}

Matrix Matrix::subtract(const Matrix b) const
{
    Matrix ans;
    ans.matrix_size = matrix_size;
    for (int i = 0; i < matrix_size; i++) {
        for (int j = 0; j < matrix_size; j++) {
            ans.matrix[i][j] = matrix[i][j] - b.matrix[i][j];
        }
    }
    return ans;
}

Matrix Matrix::multiplication(const Matrix b) const
{
    Matrix ans;
    ans.matrix_size = matrix_size;
    int i, j, k;
    for (i = 0; i < matrix_size; i++) {
        for (j = 0; j < matrix_size; j++) {
            ans.matrix[i][j] = 0;
            for(k = 0; k < matrix_size; k++) {
                ans.matrix[i][j] += matrix[i][k] * b.matrix[k][j];
            }
        }
    }
    return ans;
}

Matrix Matrix::inc() const
{
    Matrix ans;
    ans.matrix_size = matrix_size;
    for (int i = 0; i < matrix_size; i++) {
        for (int j = 0; j < matrix_size; j++) {
            ans.matrix[i][j] = (matrix[i][j] + 1) % 10;
        }
    }
    return ans;
}

void Matrix::Transpose() const
{
    int i, j;
    for(i = 0; i < matrix_size; i++) {
        for(j = 0; j < matrix_size-1; j++) {
            cout << matrix[j][i] << " ";
        }
        cout << matrix[j][i] << endl;
    }
}

void Matrix::output() const
{
    int i, j;
    for(i = 0; i < matrix_size; i++) {
        for(j = 0; j < matrix_size-1; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << matrix[i][j] << endl;
    }
}
