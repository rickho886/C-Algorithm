#include <stdlib.h>
#include <stdio.h>
int preorder_idx = 0;
int *a;

typedef struct _node {
    int value;
    struct _node *left;
    struct _node *right;
} Node;

Node *create_node(int value);
void destroy(Node *root);
Node *build(int *inorder, int *preorder, int inorder_start, int inorder_end);
void postorder(Node *root);

Node *create_node(int value) {
    Node *tmp = (Node*) malloc(sizeof(Node));
    tmp->value = value;
    tmp->left = tmp->right = NULL;
    return tmp;
}

void destroy(Node *root) {
    if (root == NULL)
        return;
    destroy(root->left);
    destroy(root->right);
    free(root);
}

void postorder(Node *root)
{
    if(root == NULL)
        return NULL;
    postorder(root->left);
    postorder(root->right);
    printf("%d ", root->value);
}

Node *build(int *inorder, int *preorder, int inorder_start, int inorder_end)
{
    if(inorder_start > inorder_end)
        return NULL;
    Node* treeNode = create_node(preorder[preorder_idx++]);
    if(inorder_start == inorder_end)
        return treeNode;
    int inorder_idx = a[treeNode->value];
    treeNode->left = build(inorder, preorder, inorder_start, inorder_idx-1);
    treeNode->right = build(inorder, preorder, inorder_idx+1, inorder_end);
    return treeNode;
}


int main() {
    int i, n;
    scanf("%d", &n);
    int *inorder = (int*) malloc(n*sizeof(int));
    int *preorder = (int*) malloc(n*sizeof(int));
    a = (int*) malloc(n*sizeof(int));
    for ( i = 0; i < n; i++) {
        scanf("%d", &inorder[i]);
        a[inorder[i]] = i;
    }
    for ( i = 0; i < n; i++)
        scanf("%d", &preorder[i]);
    Node *root = build(inorder, preorder, 0, n-1);
    postorder(root);
    printf("\n");
    return 0;
}
