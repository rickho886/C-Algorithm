#include <stdio.h>
#define SIZE_STR 100
int flag = 0;
int map[11][11] = {0};
int center[11][11] = {0};
int N, NQ, NC;
int q, c;
int trow, tcolumn;
void place(int row, int N);
int valid(int row, int column);
void threat(int row, int column);
void unthreat(int row, int column);
void threat_castle(int row, int column);
void unthreat_castle(int row, int column);

int main(void)
{
    scanf("%d%d",&NQ,&NC);
    q = NQ;
    c = NC;
    N = NQ + NC;
    place(0, N);
    printf("%d\n", flag);
    flag = 0;
}

void place(int row, int N)
{
    int j;
    if(row == N) {
        flag++;
    } else {
        for(j = 0; j < N; j++) {
            if(q > 0) {
                if(valid(row, j)) {
                    center[row][j] = 1;
                    threat(row, j);
                    if(center[row][j] == 1) {
                        q--;
                        place(row+1, N);
                        unthreat(row, j);
                        center[row][j] = 0;
                        q++;
                    }
                }
            }
        }
        for(j = 0; j < N; j++) {
            if(c > 0) {
                if(valid(row, j)) {
                    center[row][j] = 1;
                    threat_castle(row, j);
                    if(center[row][j] == 1) {
                        c--;
                        place(row+1, N);
                        unthreat_castle(row, j);
                        center[row][j] = 0;
                        c++;
                    }
                }
            }
        }
    }
}

int valid(int row, int column)
{
    if(map[row][column] == 0) {
        return 1;
    } else {
        return 0;
    }
}

void threat(int row, int column)
{
    int temp = 0;
    map[row][column]++;
    trow = row;
    tcolumn = column;
    while(trow + 1 < N) {
        if(center[trow+1][tcolumn] == 1) {
            temp = 1;
        }
        map[trow+1][tcolumn]++;
        trow++;
    }
    trow = row;
    tcolumn = column;
    while(tcolumn + 1 < N) {
        if(center[trow][tcolumn+1] == 1) {
            temp = 1;
        }
        map[trow][tcolumn+1]++;
        tcolumn++;
    }
    trow = row;
    tcolumn = column;
    while(trow - 1 >= 0) {
        if(center[trow-1][tcolumn] == 1) {
            temp = 1;
        }
        map[trow-1][tcolumn]++;
        trow--;
    }
    trow = row;
    tcolumn = column;
    while(tcolumn - 1 >= 0) {
        if(center[trow][tcolumn-1] == 1) {
            temp = 1;
        }
        map[trow][tcolumn-1]++;
        tcolumn--;
    }
    trow = row;
    tcolumn = column;
    while(trow + 1 < N && tcolumn + 1 < N) {
        if(center[trow+1][tcolumn+1] == 1) {
            temp = 1;
        }
        map[trow+1][tcolumn+1]++;
        trow++;
        tcolumn++;
    }
    trow = row;
    tcolumn = column;
    while(trow - 1 >= 0 && tcolumn - 1 >= 0) {
        if(center[trow-1][tcolumn-1] == 1) {
            temp = 1;
        }
        map[trow-1][tcolumn-1]++;
        trow--;
        tcolumn--;
    }
    trow = row;
    tcolumn = column;
    while(trow + 1 < N && tcolumn - 1 >= 0) {
        if(center[trow+1][tcolumn-1] == 1) {
            temp = 1;
        }
        map[trow+1][tcolumn-1]++;
        trow++;
        tcolumn--;
    }
    trow = row;
    tcolumn = column;
    while(trow - 1 >= 0 && tcolumn + 1 < N) {
        if(center[trow-1][tcolumn+1] == 1) {
            temp = 1;
        }
        map[trow-1][tcolumn+1]++;
        trow--;
        tcolumn++;
    }
    if(temp == 1) {
        unthreat(row, column);
        center[row][column] = 0;
    }
}

void unthreat(int row, int column)
{
    map[row][column]--;
    trow = row;
    tcolumn = column;
    while(trow + 1 < N) {
        map[trow+1][tcolumn]--;
        trow++;
    }
    trow = row;
    tcolumn = column;
    while(tcolumn + 1 < N) {
        map[trow][tcolumn+1]--;
        tcolumn++;
    }
    trow = row;
    tcolumn = column;
    while(trow - 1 >= 0) {
        map[trow-1][tcolumn]--;
        trow--;
    }
    trow = row;
    tcolumn = column;
    while(tcolumn - 1 >= 0) {
        map[trow][tcolumn-1]--;
        tcolumn--;
    }
    trow = row;
    tcolumn = column;
    while(trow + 1 < N && tcolumn + 1 < N) {
        map[trow+1][tcolumn+1]--;
        trow++;
        tcolumn++;
    }
    trow = row;
    tcolumn = column;
    while(trow - 1 >= 0 && tcolumn - 1 >= 0) {
        map[trow-1][tcolumn-1]--;
        trow--;
        tcolumn--;
    }
    trow = row;
    tcolumn = column;
    while(trow + 1 < N && tcolumn - 1 >= 0) {
        map[trow+1][tcolumn-1]--;
        trow++;
        tcolumn--;
    }
    trow = row;
    tcolumn = column;
    while(trow - 1 >= 0 && tcolumn + 1 < N) {
        map[trow-1][tcolumn+1]--;
        trow--;
        tcolumn++;
    }
}

void threat_castle(int row, int column)
{
    int temp = 0;
    map[row][column]++;
    trow = row;
    tcolumn = column;
    while(trow + 1 < N) {
        if(center[trow+1][tcolumn] == 1) {
            temp = 1;
        }
        map[trow+1][tcolumn]++;
        trow++;
    }
    trow = row;
    tcolumn = column;
    while(tcolumn + 1 < N) {
        if(center[trow][tcolumn+1] == 1) {
            temp = 1;
        }
        map[trow][tcolumn+1]++;
        tcolumn++;
    }
    trow = row;
    tcolumn = column;
    while(trow - 1 >= 0) {
        if(center[trow-1][tcolumn] == 1) {
            temp = 1;
        }
        map[trow-1][tcolumn]++;
        trow--;
    }
    trow = row;
    tcolumn = column;
    while(tcolumn - 1 >= 0) {
        if(center[trow][tcolumn-1] == 1) {
            temp = 1;
        }
        map[trow][tcolumn-1]++;
        tcolumn--;
    }
    if(temp == 1) {
        unthreat(row, column);
        center[row][column] = 0;
    }
}

void unthreat_castle(int row, int column)
{
    map[row][column]--;
    trow = row;
    tcolumn = column;
    while(trow + 1 < N) {
        map[trow+1][tcolumn]--;
        trow++;
    }
    trow = row;
    tcolumn = column;
    while(tcolumn + 1 < N) {
        map[trow][tcolumn+1]--;
        tcolumn++;
    }
    trow = row;
    tcolumn = column;
    while(trow - 1 >= 0) {
        map[trow-1][tcolumn]--;
        trow--;
    }
    trow = row;
    tcolumn = column;
    while(tcolumn - 1 >= 0) {
        map[trow][tcolumn-1]--;
        tcolumn--;
    }
}
