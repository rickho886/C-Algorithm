#include <iostream>
#include "function.h"
using namespace std;

Matrix::Matrix() : matrix_size{0}, matrix{}{};
Matrix::Matrix(const int N, const int m[50][50])
{
    matrix_size = N;
    for(int i = 0; i < matrix_size; i++) {
        for(int j = 0; j < matrix_size; j++) {
            matrix[i][j] = m[i][j];
        }
    }
}

Matrix Matrix::row(const int row1, const int row2) const
{
    Matrix ans(matrix_size, matrix);
    for(int i = 0; i < matrix_size; i++) {
        ans.matrix[row1][i] = matrix[row2][i];
        ans.matrix[row2][i] = matrix[row1][i];
    }
    return ans;
}

Matrix Matrix::rotate90() const
{
    Matrix ans(matrix_size, matrix);
    for(int i = 0; i < matrix_size; i++) {
        for(int j = 0; j < matrix_size; j++) {
            ans.matrix[i][j] = matrix[matrix_size-j-1][i];
        }
    }
    return ans;
}

Matrix Matrix::rotatecounter90() const
{
    Matrix ans;
    ans = this->rotate90().rotate90().rotate90();
    return ans;
}

void Matrix::symmetric() const
{
    for(int i = 0; i < matrix_size; i++) {
        for(int j = 0; j < matrix_size; j++) {
            if(matrix[i][j] != matrix[j][i]) {
                cout << "no" << endl;
                return;
            }
        }
    }
    cout << "yes" << endl;
}

void Matrix::output() const
{
    int i, j;
    for(i = 0; i < matrix_size; i++) {
        for(j = 0; j < matrix_size-1; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << matrix[i][j] << endl;
    }
}
