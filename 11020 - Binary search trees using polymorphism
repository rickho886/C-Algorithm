#include <iostream>
#include "function.h"

using namespace std;

Array_BST::Array_BST() {
    for(int i = 1; i <= 1025; i++) {
        array[i] = 0;
    }
}
void Array_BST::insert(const int &num) {
    if(array[1] == 0) {
        array[1] = num;
        Height = 1;
    } else {
        int k = 1;
        int height_count = 1;
        while(1) {
            height_count++;
            if(num < array[k]) {
                if(array[2*k] != 0) k = 2*k;
                else {
                    array[2*k] = num;
                    break;
                }
            } else if(num > array[k]) {
                if(array[2*k+1] != 0) k = 2*k+1;
                else {
                    array[2*k+1] = num;
                    break;
                }
            } else break;
        }
        Height = (height_count > Height) ? height_count : Height;
    }
}

bool Array_BST::search(const int &num) const {
    int k = 1;
    int h = Height;
    while(h--) {
        if(num < array[k]) {
            if(array[2*k] == num) return true;
            k = 2*k;
        } else if(num > array[k]) {
            if(array[2*k+1] == num) return true;
            k = 2*k+1;
        } else if(num == array[k]) return true;
    }
    return false;
}

List_BST::List_BST() {
    root = NULL;
}
void List_BST::insert(const int &num) {
    if(root==NULL) {
        root = createLeaf(num);
        Height = 1;
    }
    else {
        int height_count = -1;
        ListNode *target = root;
        while(1) {
            height_count++;
            if(num < target->key) {
                if(target->left) target = target->left;
                else target->left = createLeaf(num);
            }
            else if(num > target->key) {
                if(target->right) target = target->right;
                else target->right = createLeaf(num);
            }
            else break;
        }
        Height = (height_count > Height)? height_count : Height;
    }
}
bool List_BST::search(const int &num) const {
    int h = Height;
    ListNode *target = root;
    while(h--) {
        if(num < target->key) {
            if(target->left) {
                if(target->left->key == num) return true;
                target = target->left;
            } else return false;
        } else if(num > target->key) {
            if(target->right) {
                if(target->right->key == num) return true;
                target = target->right;
            } else return false;
        } else if(num == target->key) return true;
    }
    return false;
}

ListNode* List_BST::createLeaf(int key) const {
    ListNode *newLeaf = new ListNode(key);
    return newLeaf;
}

void List_BST::deleteTree(ListNode *root) {
    if(root->left) deleteTree(root->left);
    if(root->right) deleteTree(root->right);
    delete [] root;
}
