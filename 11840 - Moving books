#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct _Node {
    int value[26];
    int stack;
    struct _Node* next;
}Node;

int main()
{
    int i, j, k, l, n;
    int flag;
    int A, B;
    char com1[5], com2[5];
    Node* first = NULL;
    Node* temp;
    Node* temp2;
    Node* find;
    Node* new_node;
    scanf("%d", &n);
    for(i = 0; i < n; i++) {
        if(first == NULL) {
            new_node = (Node*)malloc(sizeof(Node));
            new_node->value[0] = i;
            new_node->value[1] = -1;
            new_node->stack = 1;
            first = new_node;
            temp = first;
            continue;
        }
        new_node = (Node*)malloc(sizeof(Node));
        new_node->value[0] = i;
        new_node->value[1] = -1;
        new_node->stack = 1;
        temp->next = new_node;
        temp = temp->next;
    }
    k = 0;
    while(k != EOF) {
        scanf("%s", com1);
        if(strcmp(com1, "exit") == 0) {
            temp = first;
            for(i = 0; i < n; i++) {
                printf("%d:", i);
                for(j = 0; temp->value[j] > -1;) {
                    printf(" %d", temp->value[j]);
                    j++;
                }
                printf("\n");
                temp = temp->next;
            }
            break;
        }
        scanf("%d %s %d", &A, com2, &B);
        if(A == B) continue;
        temp = first;
        flag = 0;
        if(strcmp(com1, "move") == 0) {
            for(i = 0; temp->value[i] != A;) {
                if(temp->value[i] < 0){
                    temp = temp->next;
                    i = 0;
                    continue;
                }
                i++;
            }
            for(j = 0; temp->value[j] > -1;) {
                if(temp->value[j] == A || temp->value[j] == B) flag++;
                j++;
            }
            if(flag == 2) {
                continue;
            }
            for(j = i+1; temp->value[j] > -1;) {
                find = first;
                for(k = 0; k < temp->value[j];) {
                    find = find->next;
                    k++;
                }
                for(k = 0; find->value[k] > -1;) {
                    k++;
                }
                find->value[k] = temp->value[j];
                find->value[k+1] = -1;
                find->stack++;
                temp->value[j] = -1;
                temp->stack--;
                j++;
            }
            temp->value[i] = -1;
            temp->stack--;
            if(strcmp(com2, "onto") == 0) {
                temp = first;
                for(i = 0; temp->value[i] != B;) {
                    if(temp->value[i] < 0){
                        temp = temp->next;
                        i = 0;
                        continue;
                    }
                    i++;
                }
                for(j = i+1; temp->value[j] > -1;) {
                    find = first;
                    for(k = 0; k < temp->value[j];) {
                        find = find->next;
                        k++;
                    }
                    for(k = 0; find->value[k] > -1;) {
                        k++;
                    }
                    find->value[k] = temp->value[j];
                    find->value[k+1] = -1;
                    find->stack++;
                    temp->value[j] = -1;
                    temp->stack--;
                    j++;
                }
                temp->value[i+1] = A;
                temp->value[i+2] = -1;
                temp->stack++;
            } else if(strcmp(com2, "over") == 0) {
                temp = first;
                for(i = 0; temp->value[i] != B;) {
                    if(temp->value[i] < 0){
                        temp = temp->next;
                        i = 0;
                        continue;
                    }
                    i++;
                }
                for(i = 0; temp->value[i] > -1;) {
                    i++;
                }
                temp->value[i] = A;
                temp->value[i+1] = -1;
                temp->stack++;
            }
        } else if(strcmp(com1, "pile") == 0) {
            for(i = 0; temp->value[i] != A;) {
                if(temp->value[i] < 0){
                    temp = temp->next;
                    i = 0;
                    continue;
                }
                i++;
            }
            for(j = 0; temp->value[j] > -1;) {
                if(temp->value[j] == A || temp->value[j] == B) flag++;
                j++;
            }
            if(flag == 2) {
                continue;
            }
            if(strcmp(com2, "onto") == 0) {
                temp2 = first;
                for(j = 0; temp2->value[j] != B;) {
                    if(temp2->value[j] < 0){
                        temp2 = temp2->next;
                        j = 0;
                        continue;
                    }
                    j++;
                }
                for(k = j+1; temp2->value[k] > -1;) {
                    find = first;
                    for(l = 0; l < temp2->value[k];) {
                        find = find->next;
                        l++;
                    }
                    for(l = 0; find->value[l] > -1;) {
                        l++;
                    }
                    find->value[l] = temp2->value[k];
                    find->value[l+1] = -1;
                    find->stack++;
                    temp2->value[k] = -1;
                    temp2->stack--;
                    k++;
                }
                for(; temp->value[i] > -1;) {
                    temp2->value[j+1] = temp->value[i];
                    temp->value[i] = -1;
                    temp2->stack++;
                    temp->stack--;
                    j++;
                    i++;
                }
                temp2->value[j+1] = -1;
            } else if(strcmp(com2, "over") == 0) {
                temp2 = first;
                for(j = 0; temp2->value[j] != B;) {
                    if(temp2->value[j] < 0){
                        temp2 = temp2->next;
                        j = 0;
                        continue;
                    }
                    j++;
                }
                for(j = 0; temp2->value[j] > -1;) {
                    j++;
                }
                for(; temp->value[i] > -1;) {
                    temp2->value[j] = temp->value[i];
                    temp->value[i] = -1;
                    temp2->stack++;
                    temp->stack--;
                    j++;
                    i++;
                }
                temp2->value[j] = -1;
            }
        }
        k++;
    }
}
