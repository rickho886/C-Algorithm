// looping - version
#include <stdio.h>
long long bigmod ( long long a, long long p, long long m )
{
    long long res = 1;
    long long x = a;

    while ( p )
    {
        if ( p & 1 ) //p is odd
        {
            res = ( res * x ) % m;
        }
        x = ( x * x ) % m;
        p = p >> 1;
    }

    return res;
}

int main()
{
    int T;
    long long a, p, m;
    scanf("%d", &T);
    while(T--) {
        scanf("%lld%lld%lld", &a, &p, &m);
        printf("%lld\n",bigmod(a, p, m));
    }
}


// recursion-version

#include <stdio.h>
long long bigmod ( long long a, long long p, long long m )
{
    if ( p == 0 )return 1; // If power is 0 ( a ^ 0 ), return 1

    if ( p & 1 ) // If power is odd
    {
        return ( ( a % m ) * ( bigmod ( a, p - 1, m ) ) ) % m;
    }
    else
    {
        long long tmp = bigmod ( a, p / 2, m );
        return ( tmp * tmp ) % m;
    }
}

int main()
{
    int T;
    long long a, p, m;
    scanf("%d", &T);
    while(T--) {
        scanf("%lld%lld%lld", &a, &p, &m);
        printf("%lld\n",bigmod(a, p, m));
    }
}

source : http://alavolacodes.blogspot.com/2013/07/big-mod.html
